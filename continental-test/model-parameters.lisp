(defparameter *isbl-levels* '(1015 1000 985 970 950 925 900 875 850 800 750 700 650 600 550)) ;; same GDPS, RDPS, HRDPS
(defparameter *date* (concatenate 'string (sb-posix:getenv "YEAR") (sb-posix:getenv "MONTH") (sb-posix:getenv "DAY")))
(defparameter *forecast-zero-hour* (parse-integer (or (sb-posix:getenv "HOUR") "0")))
(defparameter *model* (or (sb-posix:getenv "MODEL") "hrdps"))
(defparameter *fileheader* (or (sb-posix:getenv "FILEHEADER") "CMC_hrdps_continental"))
(defparameter *directory* (or (sb-posix:getenv "OUTPUTDIR") "/mnt/input/hrdps"))
(defparameter *timestart* (parse-integer (or (sb-posix:getenv "TIMESTART") "0")))
(defparameter *timestep* (parse-integer (or (sb-posix:getenv "TIMESTEP") "1")))
(defparameter *timestop* (parse-integer (or (sb-posix:getenv "TIMESTOP") "48")))
(defparameter *tail* (or (sb-posix:getenv "TAIL") "-00.grib2"))
(defparameter *resolution* (or (sb-posix:getenv "RESOLUTION") "_ps2.5km_"))
(defparameter *tiledir* (or (sb-posix:getenv "TILEDIR") "/mnt/tiles/hrdps"))

(defparameter *ulx* (parse-integer (or (sb-posix:getenv "XMIN") "-152")))
(defparameter *lrx* (parse-integer (or (sb-posix:getenv "XMAX") "-42")))
(defparameter *uly* (parse-integer (or (sb-posix:getenv "YMAX") "71")))
(defparameter *lry* (parse-integer (or (sb-posix:getenv "YMIN") "27")))

(defparameter *xstep* (parse-integer (or (sb-posix:getenv "XSTEP") "2")))
(defparameter *ystep* (parse-integer (or (sb-posix:getenv "YSTEP") "2")))


(defun tile-iterator ()
  (let* ((ulx *ulx*)
	 (uly *uly*)
	 (lrx *lrx*)
	 (lry *lry*)
	 (minx ulx)
	 (maxx lrx)
	 (miny lry)
	 (maxy uly)
	 (x ulx)
	 (y (- uly *ystep*)))
    (lambda ()
      (if (and (<= minx x (- maxx *xstep*)) (<= miny y (- maxy *ystep*)))
	  (prog1
	      (list x y (+ x *xstep*) (+ y *ystep*))
	    (incf x *xstep*)
	    (when (> x (- maxx *xstep*))
	      (decf y *ystep*)
	      (setf x minx)))
	  nil))))

(defun tile-id (lon lat)
  (let* ((lon (read-from-string lon))
         (lat (read-from-string lat))
         (latq (* *xstep* (floor (/ lat *xstep*))))
         (lonq (* *ystep* (floor (/ lon *ystep*)))))
    (assert (< lonq lon (+ *ystep* lonq)))
    (assert (< latq lat (+ *xstep* latq)))
    (values (format nil "~A:~A:~A:~A" latq (+ *xstep* latq) lonq (+ *ystep* lonq))
	(list latq lonq (+ *xstep* latq) (+ *ystep* lonq)))))

